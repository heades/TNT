metavar term_var, x, y, z, a, b, r, n ::=
indexvar index_var, i,j,k,l,m,n ::= 

grammar

% L Types:
A, B, C :: 'LTypes_' ::=
  | True     ::   :: Base
  {{tex \top }}
  | A x B    ::   :: Pairs
  {{tex [[A]] \times [[B]] }}
  | D X      ::   :: D
  {{tex \mathsf{D}\,[[X]] }}
  | A -> B   ::   :: Fun
  | ( A )    :: S :: Parens

% P Types:
X, Y, Z :: 'PTypes_' ::=
  | True     ::   :: True
  {{tex \top }}
  | Nat      ::   :: Nat
  {{tex \mathsf{Nat} }}
  | X x Y    ::   :: Pairs
  {{tex [[X]] \times [[Y]] }}
  | X -> Y   ::   :: Fun
  | T A      ::   :: T
  {{tex \mathsf{T}\,[[A]] }}
  | DA X     :: M :: TMonad
  {{tex \dar\,[[X]] }}
  | ( X )    :: S :: Parens
  | h( X )   :: S :: HParens
  {{tex [[X]] }}

t :: 'Terms_' ::=
  | x           ::   :: Var
  | *           ::   :: Unit
  | 0           ::   :: Zero
  | suc         ::   :: Succ
  | ( t1 , t2 ) ::   :: Pairs
  | proj1 t     ::   :: Proj1
  {{tex \mathsf{proj}_1\,[[t]] }}
  | proj2 t     ::   :: Proj2
  {{tex \mathsf{proj}_2\,[[t]] }}
  | \ x : A . t ::   :: FunL
  {{tex \lambda [[x]]:[[A]].[[t]] }}
  | \ x : X . t ::   :: FunP
  {{tex \lambda [[x]]:[[X]].[[t]] }}
  | fix           ::   :: YComb
  {{tex \mathsf{fix} }}
  | case t1 { 0 -> t2 , suc x -> t3 } :: :: Case
  {{tex \mathsf{case}\,[[t1]]\,\{[[0]] \to [[t2]], [[suc]]\,[[x]] \to [[t3]] \} }}
  | t1 t2       ::   :: App
  | D t         ::   :: D
  {{tex \mathsf{D}\,[[t]] }}
  | T t         ::   :: T
  {{tex \mathsf{T}\,[[t]] }}
  | derelict t  ::   :: DeRel
  {{tex \mathsf{derelict}\,[[t]] }}
  | let T x = t in t' :: :: LetD
  {{tex \mathsf{let}\,\mathsf{T}\,[[x]] = [[t]]\,\mathsf{in}\,[[t']] }}
  | let x <- t1 in t2 :: M :: KlComp
  {{tex \mathsf{let}\,[[x]] = [[t1]]\,\mathsf{in}\,[[t2]] }}
  | return t      :: M :: Return
  {{tex \mathsf{return}\,[[t]] }}  
  | ( t )       :: S :: Parens
  | h( t )      :: M :: HParens
  {{tex [[t]] }}
  | [ t' / x ] t :: M :: Subst

G {{tex \Gamma}} :: 'Ctx_' ::=
  | .             ::   :: Empty 
  | x : A         ::   :: El1
  | x : X         ::   :: El2
  | G1 , G2       ::   :: Ext
  | G1 , ... , Gi ::   :: Ext2

D {{tex \Delta}} :: 'DCtx_' ::=
  | .             ::   :: Empty 
  | x : A         ::   :: El1
  | x : X         ::   :: El2
  | D1 , D2       ::   :: Ext
  | D1 , ... , Di ::   :: Ext2

terminals :: 'terminals_' ::=
  | ->    :: :: Imp
  {{tex \rightarrow }}
  | J    :: :: JE
  {{tex J }}
  | H    :: :: HE
  {{tex H }}
  | I     :: :: TUnit
  {{tex I }}
  | .     :: :: Empty
  {{tex \cdot}}
  | notin   :: :: NotIn {{ tex \not\in }}


formula :: 'formula_' ::=
  | judgement                ::    :: judgement
  | formula1 && formula2 ::    :: Quad
  {{tex [[formula1]] \quad [[formula2]] }}
  | ( formula )              ::    :: parens
  | x notin FV ( t ) :: M :: FV
  {{tex [[x]] \not\in \mathsf{FV}([[t]]) }}

defns

Jtyp :: '' ::=

defn
  G |-L t : A ::  :: LogicalTyp :: 'L_'
  {{tex [[G]] \vdash_{\cat{L} } [[t]] : [[A]] }}
by

  ----------------------- :: Ax
  G1, x : A, G2 |-L x : A

  -------------- :: True
  G |-L * : True

  G |-L t1 : A && G |-L t2 : B
  ---------------------------- :: Prod
  G |-L (t1, t2) : A x B

  G |-L t : A x B
  ----------------- :: Proj1
  G |-L proj1 t : A

  G |-L t : A x B
  ----------------- :: Proj2
  G |-L proj2 t : B

  G, x : A |-L t : B
  --------------------- :: Fun
  G |-L \x:A.t : A -> B

  G |-L t2 : A
  G |-L t1 : A -> B
  ----------------- :: App
  G |-L t1 t2 : B

  G;. |-P t : X
  ---------------- :: D
  G |-L D t : D X
  

defn
  G |-L t = t' : A ::  :: LogTypEq :: 'LEq_'
  {{tex [[G]] \vdash_{\cat{L} } [[t]] = [[t']] : [[A]] }}
by

 --------------------------- :: Ax
 G1, x : A, G2 |-L x = x : A

 G |-L t : True
 ------------------ :: Unit
 G |-L t = * : True

 G |-L t1 : A && G |-L t2 : B
 ---------------------------- :: Proj1
 G |-L proj1 (t1,t2) = t1 : A

 G |-L t1 : A && G |-L t2 : B
 ---------------------------- :: Proj2
 G |-L proj2 (t1,t2) = t2 : B

 G |-L t : A x B
 ------------------------------------ :: EtaP
 G |-L (proj1 t, proj2 t) = t : A x B

 G |-L t = t' : A x B
 -------------------------------- :: Proj1C
 G |-L proj1 t = proj1 t' : A

 G |-L t = t' : A x B
 -------------------------------- :: Proj2C
 G |-L proj2 t = proj2 t' : B

 G |-L t1 = t1' : A &&  G |-L t2 = t2' : B
 ----------------------------------------- :: PairC
 G |-L (t1 , t2) = (t1, t2') : A x B

 G |-L t' : B
 G, x : A |-L t : B
 ----------------------------- :: Beta
 G |-L (\x:A.t) t' = [t'/x]t : B

 G |-L t : A -> B && x notin FV(t)
 --------------------------------- :: Eta
 G |-L (\x:A.h(t x)) = t : A -> B

 G, x : A |-L t = t' : B
 ----------------------- :: FunC
 G |-L \x:A.t = \x:A.t' : B

 G |-L t : A  && G, x : A |-L t1 = t2 : B
 ---------------------------------------- :: Subst
 G |-L [t/x]t1 = [t/x]t2 : B

 G |-L t1 = t2 : A
 -------------------- :: Weak
 G,G' |-L t1 = t2 : A

 G1, x : A, y : B, G2 |-L t1 = t2 : C
 ------------------------------------ :: Ex
 G1, y : B, x : A, G2 |-L t1 = t2 : C
 
 G |-L t : A
 --------------- :: Refl
 G |-L t = t : A

 G |-L t1 = t2 : A
 ----------------- :: Sym
 G |-L t2 = t1 : A

 G |-L t1 = t2 : A && G |-L t2 = t3 : A
 -------------------------------------- :: Trans
 G |-L t1 = t3 : A

defn
  D |-P t : X ::  :: ProgTyp :: 'P_'
  {{tex [[D]] \vdash_{\cat{P} } [[t]] : [[X]] }}
by

  ----------------------- :: Ax
  D1, x : X, D2 |-P x : X

  -------------- :: Unit
  D |-P * : True

  ------------- :: Zero
  D |-P 0 : Nat

  ---------------------- :: Suc
  D |-P suc : Nat -> Nat

  ------------------------- :: Fix
  D |-P fix : (X -> X) -> X

  D |-P t1 : X && D |-P t2 : Y
  ---------------------------- :: Prod
  D |-P (t1, t2) : X x Y

  D |-P t : X x Y
  ----------------- :: Proj1
  D |-P proj1 t : X

  D |-P t : X x Y
  ----------------- :: Proj2
  D |-P proj2 t : X
  
  D, x : X |-P t : Y
  ------------------- :: Fun
  D |-P \x:X.t : X -> Y

  D |-P t2 : X
  D |-P t1 : X -> Y
  ----------------- :: App
  D |-P t1 t2 : Y

  D |-P t : Nat
  D |-P t1 : X && D, x : Nat |-P t2 : X
  --------------------------------------- :: Case
  D |-P case t {0 -> t1, suc x -> t2} : X

defn
  D |-P t = t' : X ::  :: ProgTypEq :: 'PEq_'
  {{tex [[D]] \vdash_{\cat{P} } [[t]] = [[t']] : [[X]] }}
by

 --------------------------- :: Ax
 D1, x : X, D2 |-P x = x : X

 D |-P t : True
 ------------------ :: Unit
 D |-P t = * : True

 D |-P t1 : X && D |-P t2 : Y
 ---------------------------- :: Proj1
 D |-P proj1 (t1,t2) = t1 : X

 D |-P t1 : X && D |-P t2 : Y
 ---------------------------- :: Proj2
 D |-P proj2 (t1,t2) = t2 : Y

 D |-P t : X x Y
 ------------------------------------ :: EtaP
 D |-P (proj1 t, proj2 t) = t : X x Y

 D |-P t = t' : X x Y
 -------------------------------- :: Proj1C
 D |-P proj1 t = proj1 t' : X x Y

 D |-P t = t' : X x Y
 -------------------------------- :: Proj2C
 D |-P proj2 t = proj2 t' : X x Y

 D |-P t1 = t1' : X &&  D |-P t2 = t2' : Y
 ----------------------------------------- :: PairC
 D |-P (t1 , t2) = (t1, t2') : X x Y

 D |-P t' : Y
 D, x : X |-P t : Y
 ----------------------------- :: Beta
 D |-P (\x:X.t) t' = [t'/x]t : Y

 D |-P t : X -> Y && x notin FV(t)
 --------------------------------- :: Eta
 D |-P (\x:X.h(t x)) = t : X -> Y

 D, x : X |-P t = t' : Y
 ----------------------- :: FunC
 D |-P \x:X.t = \x:X.t' : Y

 D |-P t : X -> X
 --------------------------- :: Fix
 D |-P fix t = t (fix t) : X

 D |-P t = t' : X -> X
 ------------------------ :: FixC
 D |-P fix t = fix t' : X

 D |-P t = t' : Nat
 -------------------------- :: Suc
 D |-P suc t = suc t' : Nat

 D |-P t1 : X && D, x : Nat |-P t2 : X
 -------------------------------------------- :: CaseB
 D |-P case 0 {0 -> t1, suc x -> t2} = t1 : X

 D |-P n : Nat
 D |-P t1 : X && D, x : Nat |-P t2 : X
 ------------------------------------------------------- :: CaseS
 D |-P case (suc n) {0 -> t1, suc x -> t2} = [n/x]t2 : X

 D |-P t1 = t1' : X
 D, x : Nat |-P t2 = t2' : X && D |-P t = t' : Nat
 -------------------------------------------------------------------------- :: CaseC
 D |-P case t {0 -> t1, suc x -> t2} = case t' {0 -> t1', suc x -> t2'} : X

 D |-P t : X  && D, x : X |-P t1 = t2 : Y
 ---------------------------------------- :: Subst
 D |-P [t/x]t1 = [t/x]t2 : Y

 D |-P t1 = t2 : X
 -------------------- :: Weak
 D,D' |-P t1 = t2 : X

 D1, x : X, y : Y, D2 |-P t1 = t2 : Z
 ------------------------------------ :: Ex
 D1, y : Y, x : X, D2 |-P t1 = t2 : Z
 
 D |-P t : X
 --------------- :: Refl
 D |-P t = t : X

 D |-P t1 = t2 : X
 ----------------- :: Sym
 D |-P t2 = t1 : X

 D |-P t1 = t2 : X && D |-P t2 = t3 : X
 -------------------------------------- :: Trans
 D |-P t1 = t3 : X

defn
  G ; D |-P t : X ::  :: TNTProgTyp :: 'PT_'
  {{tex [[G]];[[D]] \vdash_{\cat{P} } [[t]] : [[X]] }}
by

  --------------------------- :: Ax
  G ; D1, x : X, D2 |-P x : X

  ------------------ :: Unit
  G ; D |-P * : True

  ----------------- :: Zero
  G ; D |-P 0 : Nat

  -------------------------- :: Suc
  G ; D |-P suc : Nat -> Nat

  ----------------------------- :: Fix
  G ; D |-P fix : (X -> X) -> X

  G ; D |-P t1 : X && G ; D |-P t2 : Y
  ------------------------------------ :: Prod
  G ; D |-P (t1, t2) : X x Y

  G ; D |-P t : X x Y
  --------------------- :: Proj1
  G ; D |-P proj1 t : X

  G ; D |-P t : X x Y
  --------------------- :: Proj2
  G ; D |-P proj2 t : X
  
  G ; D, x : X |-P t : Y
  ------------------------- :: Fun
  G ; D |-P \x:X.t : X -> Y

  G ; D |-P t2 : X
  G ; D |-P t1 : X -> Y
  --------------------- :: App
  G ; D |-P t1 t2 : Y

  G ; D |-P t : Nat
  G ; D |-P t1 : X && G ; D, x : Nat |-P t2 : X
  --------------------------------------------- :: Case
  G ; D |-P case t {0 -> t1, suc x -> t2} : X

  G |-L t : A
  ------------------- :: T
  G ; . |-P T t : T A

  G ; D |-P t1 : T A && G, x : A ; D |-P t2 : X
  --------------------------------------------- :: Te
  G ; D |-P let T x = t1 in t2 : X

  G |-L t : D X
  ------------------------ :: De
  G ; D |-P derelict t : X
